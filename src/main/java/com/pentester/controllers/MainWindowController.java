package com.pentester.controllers;

import java.io.IOException;
import java.net.URL;
import java.util.*;
import com.pentester.controls.CustomMenuItem;
import com.pentester.controls.CustomTab;
import com.pentester.functions.Tool;
import com.pentester.functions.ToolEngine;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.VBox;

import javax.swing.*;

public class MainWindowController implements Initializable
{
	@FXML
	public Accordion toolbox;
	@FXML
	public TabPane tabPane;
	@FXML MenuBar menuBar;
	private final Properties myProperties = new Properties();

	@Override
	public void initialize(URL arg0, ResourceBundle arg1)
	{
		// setup the menu bar
		Menu fileMenu = new Menu("File");
		Menu helpMenu = new Menu("Help");

		CustomMenuItem newToolItem = new CustomMenuItem("New Tool", "/icons/add-icon.png");
		CustomMenuItem deleteToolsItem = new CustomMenuItem("Delete Tools", "/icons/trash-icon.png");
		CustomMenuItem refreshItem = new CustomMenuItem("Refresh Toolbox", "/icons/refresh-icon.png");
		CustomMenuItem preferencesItem = new CustomMenuItem("Preferences", "/icons/settings-icon.png");
		SeparatorMenuItem separatorMenuItem = new SeparatorMenuItem();
		CustomMenuItem exitItem = new CustomMenuItem("Exit", "/icons/close-icon.png");
		CustomMenuItem aboutItem = new CustomMenuItem("About PenTester", "/icons/help-icon.png");

		refreshItem.setOnAction(actionEvent -> refreshToolBox_OnClick());
		preferencesItem.setOnAction(actionEvent -> preferencesItem_OnClick());

		fileMenu.getItems().add(newToolItem);
		fileMenu.getItems().add(deleteToolsItem);
		fileMenu.getItems().add(refreshItem);
		fileMenu.getItems().add(preferencesItem);
		fileMenu.getItems().add(separatorMenuItem);
		fileMenu.getItems().add(exitItem);
		helpMenu.getItems().add(aboutItem);

		menuBar.getMenus().add(fileMenu);
		menuBar.getMenus().add(helpMenu);

		// get the current directory and default tools location, then set it as a property
		if(System.getProperty("os.name").toLowerCase().contains("windows"))
			myProperties.setProperty("tools.path", System.getProperty("user.dir") + "\\src\\Tools");
		else
			myProperties.setProperty("tools.path", System.getProperty("user.dir") + "/src/Tools");

		// populate the panes with tools
		populateList();
	}

	private void populateList()
	{
		try
		{
			// clear toolbox first
			toolbox.getPanes().clear();

			// Load all tools from the specified path
			ToolEngine te = new ToolEngine(myProperties.getProperty("tools.path"));
			ObservableList<Tool> tools = te.loadTools();

			Comparator<Tool> comparator = Comparator.comparing(Tool::getCategory);
			FXCollections.sort(tools, comparator);

			int paneIndex = 0;
			String currCategory = tools.get(0).getCategory();

			TitledPane tp = new TitledPane(currCategory, new VBox());
			tp.setAnimated(false);

			toolbox.getPanes().add(tp);

			for (Tool t : tools) {
				if (!t.getCategory().equals(currCategory)) {
					paneIndex++;
					currCategory = t.getCategory();

					tp = new TitledPane(currCategory, new VBox());
					tp.setAnimated(false);

					toolbox.getPanes().add(tp);
				}

				VBox child = (VBox) toolbox.getPanes().get(paneIndex).getContent();

				ContextMenu ctxMenu = new ContextMenu();
				CustomMenuItem deleteToolItem = new CustomMenuItem("Delete", "/icons/trash-icon.png");
				Button btn = new Button(t.getToolName());

				ctxMenu.getItems().add(deleteToolItem);
				btn.setMaxWidth(Double.MAX_VALUE);
				btn.setUserData(t);
				btn.setMinHeight(30);
				btn.setContextMenu(ctxMenu);

				btn.setOnMouseClicked(event -> {
					if (event.getButton().equals(MouseButton.PRIMARY) && event.getClickCount() == 2) {
						System.out.println("Double Clicked");
						addNewTab(t);
					}
				});

				deleteToolItem.setOnAction(actionEvent -> {
					te.deleteTool(t);
					child.getChildren().remove(btn);
				});

				child.setPadding(new Insets(-1, -1, -1, -1));
				child.getChildren().add(btn);
			}
		}
		catch (Exception e)
		{
			System.out.println(Arrays.toString(e.getStackTrace()));
		}
	}

	private void addNewTab(Tool t)
	{
		CustomTab tab = new CustomTab(t);

		ContextMenu ctxMenu = new ContextMenu();
		CustomMenuItem renameTab = new CustomMenuItem("Rename", "/icons/rename-icon.png");
		CustomMenuItem closeTab = new CustomMenuItem("Close", "/icons/close-icon.png");
		SeparatorMenuItem sep = new SeparatorMenuItem();

		renameTab.setOnAction(actionEvent -> {
			TextInputDialog dialog = new TextInputDialog();

			dialog.setTitle("Rename Tab");
			dialog.setContentText("New Name");
			dialog.getDialogPane().getStylesheets().add(getClass().getResource("/css/application.css").toExternalForm());
			dialog.setHeaderText(null);
			dialog.setGraphic(null);
			Optional<String> result = dialog.showAndWait();

			result.ifPresent(tab::setText);
		});

		closeTab.setOnAction(actionEvent -> {
			tabPane.getTabs().remove(tab);
			Event.fireEvent(tab, new Event(tab, tab, Tab.CLOSED_EVENT));
		});

		ctxMenu.getItems().add(renameTab);
		ctxMenu.getItems().add(sep);
		ctxMenu.getItems().add(closeTab);

		tab.setContextMenu(ctxMenu);

		tabPane.getTabs().add(tab);
		tabPane.getSelectionModel().select(tabPane.getTabs().size() - 1);
	}

	public void refreshToolBox_OnClick()
	{
		populateList();
	}

	public void preferencesItem_OnClick()
	{
		try
		{
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/PreferencesWindow.fxml"));
			DialogPane pane = loader.load();
			PreferencesWindowController controller = loader.getController();
			controller.setProperties(myProperties);

			pane.getStylesheets().add(getClass().getResource("/css/application.css").toExternalForm());

			Dialog<ButtonType> dialog = new Dialog<>();
			dialog.setTitle("Preferences");
			dialog.setDialogPane(pane);
			dialog.setResizable(false);
			dialog.show();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
}
