package com.pentester;

import javafx.scene.control.TextArea;
import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class Shell {

    private final boolean isWindows;
    private final TextArea console;
    public int timeout = 10;

    public Shell(TextArea console)
    {
        isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");
        this.console = console;
    }

    public void exec(List<String> commands)
    {

        if(isWindows)
        {
            commands.add(0, "powershell.exe");
        }

        ProcessBuilder builder = new ProcessBuilder().command(commands);

        try
        {
            Process process = builder.start();

            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();

            OutputReader output = new OutputReader(inputStream, errorStream, console);
            Thread t = new Thread(output);
            t.start();

            boolean isFinished = process.waitFor(timeout, TimeUnit.SECONDS);

            if(!isFinished)
            {
                process.destroyForcibly();
            }
        }
        catch (IOException | InterruptedException e)
        {
            e.printStackTrace();
        }
    }
}

class OutputReader implements Runnable {

    private final InputStream input;
    private final InputStream error;
    private final TextArea console;

    public OutputReader(InputStream input, InputStream error, TextArea console)
    {
        this.input = input;
        this.error = error;
        this.console = console;
    }
    @Override
    public void run()
    {
        try
        {
            BufferedReader inputReader = new BufferedReader(new InputStreamReader(input));
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(error));

            String output;
            while((output = inputReader.readLine()) != null)
            {
                console.appendText(output.trim() + "\n");
            }

            while((output = errorReader.readLine()) != null)
            {
                console.appendText(output.trim() + "\n");
            }

        }catch (IOException e)
        {
            System.out.println(Arrays.toString(e.getStackTrace()));
        }
    }
}
