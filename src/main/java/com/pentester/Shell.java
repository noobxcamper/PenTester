package com.pentester;

import javafx.scene.control.TextArea;

import java.awt.*;
import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;
import java.util.function.Consumer;

public class Shell {

    private final String homeDirectory = System.getProperty("user.home");
    private final ProcessBuilder builder = new ProcessBuilder();
    private final boolean isWindows;
    private final TextArea console;

    public Shell(TextArea console)
    {
        isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");
        this.console = console;
    }

    public void exec(String command)
    {
        Consumer<String> output = new Consumer<String>() {
            @Override
            public void accept(String s) {
                console.appendText(s.trim() + "\n");
            }
        };

        if(isWindows)
        {
            builder.command("powershell.exe", command);
        }
        else
        {
            builder.command("sh", command);
        }

        try
        {
            builder.directory(new File(homeDirectory));
            Process proc = builder.start();
            StreamReader reader = new StreamReader(proc.getInputStream(), output);
            Future<?> future = Executors.newSingleThreadExecutor().submit(reader);

            int exitCode = proc.waitFor();
            assert exitCode == 0;
            future.get(10, TimeUnit.SECONDS);

        } catch (IOException | ExecutionException | RuntimeException | InterruptedException | TimeoutException e)
        {
            System.out.println(Arrays.toString(e.getStackTrace()));
        }
    }
}

class StreamReader implements Runnable
{
    private InputStream input;
    private Consumer<String> consumer;

    public StreamReader(InputStream input, Consumer<String> consumer)
    {
        this.input = input;
        this.consumer = consumer;
    }

    @Override
    public void run() {
        new BufferedReader(new InputStreamReader((input))).lines().forEach(consumer);
    }
}
