package com.pentester;

import javafx.scene.control.TextArea;
import java.io.*;
import java.util.List;

public class Shell implements Runnable {

    private Process process;
    private final TextArea console;
    public int timeout = 10;

    public Shell(TextArea console)
    {
        this.console = console;
    }

    public void exec(List<String> commands)
    {
        if(commands.size() == 0)
        {
            console.appendText("ERROR: Please add at least one command to run.");
            return;
        }
        if(commands.get(0).equals(""))
        {
            console.appendText("ERROR: Commands cannot be empty.");
            return;
        }

        ProcessBuilder builder = new ProcessBuilder().command(commands);

        try
        {
            console.appendText("Running... Please wait!\n");

            process = builder.start();

            Thread t = new Thread(this);
            t.start();
        }
        catch (IOException e)
        {
            console.appendText("Command execution failed: \n" + e.getMessage() + "\n\n");
        }
    }

    public void terminateProcess()
    {
        if(process != null)
        {
            System.out.println("terminating...");
            process.destroyForcibly();
        }
    }

    @Override
    public void run()
    {
        try
        {
            InputStream input = process.getInputStream();
            InputStream error = process.getErrorStream();

            BufferedReader inputReader = new BufferedReader(new InputStreamReader(input));
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(error));


            String output;
            while((output = inputReader.readLine()) != null)
            {
                console.appendText(output + "\n");
            }

            while((output = errorReader.readLine()) != null)
            {
                console.appendText(output + "\n");
            }

            input.close();
            error.close();
            inputReader.close();
            errorReader.close();
            process.destroy();

            console.appendText("\nDone.");
        }
        catch (IOException e)
        {
            console.appendText("Error occurred while reading output:\n" + e.getMessage() + "\n\n");
        }
    }
}