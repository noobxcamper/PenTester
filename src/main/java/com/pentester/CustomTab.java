package com.pentester;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;

public class CustomTab extends Tab
{
    private final Tool myTool;
    private final HBox mainContainer = new HBox();
    private final HBox buttonLayout = new HBox();
    private final VBox leftContainer = new VBox();
    private final VBox centerContainer = new VBox();
    private final VBox rightContainer = new VBox();
    private final ScrollPane leftScrollPane = new ScrollPane();
    private final TextField commandField = new TextField();
    private final TextArea console = new TextArea();
    private final TextArea toolSource = new TextArea();
    private final TextArea toolDesc = new TextArea();
    private final Button runBtn = new Button("Run");
    private final Button copyBtn = new Button("Copy");
    private final Button clearBtn = new Button("Clear");
    private final ObservableList<String> commandFieldList = FXCollections.observableArrayList();

    public CustomTab(Tool tool)
    {
        super(tool.toString() + " - Terminal");
        myTool = tool;

        addLayout();
        initializeCommandField();
        initializeTools();
    }

    private void addLayout()
    {
        Shell sh = new Shell(console);
        sh.timeout = 30;

        // Components Setup //
        console.setEditable(false);
        console.setWrapText(true);

        toolSource.setEditable(false);
        toolSource.setMaxHeight(100);
        toolSource.setWrapText(true);
        toolSource.setText(myTool.getToolPath());

        toolDesc.setEditable(false);
        toolDesc.setWrapText(true);
        toolDesc.setText(myTool.getToolDescription());

        runBtn.setOnMouseClicked(mouseEvent -> {
            sh.exec(commandFieldList);
        });

        copyBtn.setOnMouseClicked(mouseEvent -> {
            if(!commandField.getText().equals(""))
            {
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(new StringSelection(commandField.getText()), null);
            }
        });

        clearBtn.setOnMouseClicked(mouseEvent -> {
            console.clear();
        });

        // Left Container Setup //
        leftScrollPane.setContent(leftContainer);
        leftScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        leftScrollPane.setPadding(new Insets(5,5,5,5));
        leftContainer.setPrefWidth(300);
        leftContainer.setSpacing(10);
        leftContainer.getChildren().add(new Label("Available Options"));

        // Center Container Setup //
        HBox.setHgrow(centerContainer, Priority.ALWAYS);
        VBox.setVgrow(console, Priority.ALWAYS);
        buttonLayout.setSpacing(10);
        buttonLayout.getChildren().add(runBtn);
        buttonLayout.getChildren().add(copyBtn);
        buttonLayout.getChildren().add(clearBtn);
        centerContainer.setPadding(new Insets(5,5,5,5));
        centerContainer.setSpacing(10);
        centerContainer.getChildren().add(new Label("Terminal"));
        centerContainer.getChildren().add(commandField);
        centerContainer.getChildren().add(buttonLayout);
        centerContainer.getChildren().add(console);

        // Right Container Setup //
        VBox.setVgrow(toolDesc, Priority.ALWAYS);
        rightContainer.setPrefWidth(300);
        rightContainer.setPadding(new Insets(5,5,5,5));
        rightContainer.setSpacing(10);
        rightContainer.getChildren().add(new Label("Path"));
        rightContainer.getChildren().add(toolSource);
        rightContainer.getChildren().add(new Label("Description"));
        rightContainer.getChildren().add(toolDesc);

        // Main Container Setup //
        mainContainer.getChildren().add(leftScrollPane);
        mainContainer.getChildren().add(new Separator(Orientation.VERTICAL));
        mainContainer.getChildren().add(centerContainer);
        mainContainer.getChildren().add(new Separator(Orientation.VERTICAL));
        mainContainer.getChildren().add(rightContainer);
        mainContainer.getChildren().add(new Separator(Orientation.VERTICAL));

        this.setContent(mainContainer);
    }

    private void initializeCommandField()
    {
        commandFieldList.addListener((ListChangeListener<String>) change ->
        {
            commandField.clear();

            for (String s : commandFieldList) {
                commandField.appendText(s + " ");
            }

            commandField.setText(commandField.getText().trim());
        });

        commandFieldList.add(myTool.getToolPath());
    }

    private void initializeTools()
    {
        if(myTool.optionsLength == 0)
        {
            leftContainer.getChildren().add(new Label("This tool has no options."));
            return;
        }

        if(myTool.getToolPath().equals(""))
        {
            toolSource.setText("This tool has no source.");
        }

        if(myTool.getToolDescription().equals(""))
        {
            toolDesc.setText("This tool has no description.");
        }

        for(int i = 0; i < myTool.optionsLength; i++)
        {
            Option opt = myTool.getToolOption(i);

            switch(opt.type)
            {
                case "textfield":
                    TextField tf = new TextField();
                    tf.setPromptText(opt.name);

                    tf.focusedProperty().addListener((observableValue, oldValue, newValue) -> {
                        if(!tf.getText().equals(""))
                        {
                            // if focus == false
                            if(!newValue)
                            {
                                if(!opt.command.equals(""))
                                    commandFieldList.add(opt.command + " " + tf.getText());
                                else
                                    commandFieldList.add(tf.getText());
                            }
                            // else if focus == true
                            else
                            {
                                if(!opt.command.equals(""))
                                {
                                    commandFieldList.remove(opt.command + ' ' + tf.getText());
                                }
                                else
                                    commandFieldList.remove(tf.getText());
                            }
                        }
                    });

                    leftContainer.getChildren().add(tf);
                    break;
                case "checkbox":
                    CheckBox cb = new CheckBox(opt.name);
                    cb.selectedProperty().addListener((observableValue, oldValue, newValue) -> {
                        if(newValue)
                        {
                            commandFieldList.add(opt.command);
                        }
                        else {
                            commandFieldList.remove(opt.command);
                        }
                    });

                    leftContainer.getChildren().add(cb);
                    break;
                default:
                    break;
            }
        }
    }
}
