package com.pentester;

import java.io.IOException;
import java.net.URL;
import java.util.*;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class MainWindowController implements Initializable
{
	@FXML
	public Accordion toolbox;
	@FXML
	public TabPane tabPane;
	private final Properties myProperties = new Properties();
	private Stage myStage;
	private double X, Y = 0;

	@Override
	public void initialize(URL arg0, ResourceBundle arg1)
	{
		// get the current directory and default tools location, then set it as a property
		myProperties.setProperty("Tools Folder Path", System.getProperty("user.dir") + "\\src\\Tools");

		populateList();
	}

	private void populateList()
	{
		try
		{
			// clear toolbox first
			toolbox.getPanes().clear();

			// Load all tools from the specified path
			ToolEngine te = new ToolEngine(myProperties.getProperty("Tools Folder Path"));
			ObservableList<Tool> tools = te.loadTools();

			Comparator<Tool> comparator = Comparator.comparing(Tool::getCategory);
			FXCollections.sort(tools, comparator);

			int paneIndex = 0;
			String currCategory = tools.get(0).getCategory();

			TitledPane tp = new TitledPane(currCategory, new VBox());
			tp.setAnimated(false);

			toolbox.getPanes().add(tp);

			for (Tool t : tools) {
				if (!t.getCategory().equals(currCategory)) {
					paneIndex++;
					currCategory = t.getCategory();

					tp = new TitledPane(currCategory, new VBox());
					tp.setAnimated(false);

					toolbox.getPanes().add(tp);
				}

				VBox child = (VBox) toolbox.getPanes().get(paneIndex).getContent();
				Button btn = new Button(t.getToolName());
				btn.setMaxWidth(Double.MAX_VALUE);
				btn.setUserData(t);
				btn.setMinHeight(30);

				btn.setOnMouseClicked(event -> {
					if (event.getButton().equals(MouseButton.PRIMARY) && event.getClickCount() == 2) {
						System.out.println("Double Clicked");
						addNewTab(t);
					}
				});

				child.setPadding(new Insets(-1, -1, -1, -1));
				child.getChildren().add(btn);
			}
		}
		catch (Exception e)
		{
			System.out.println(Arrays.toString(e.getStackTrace()));
		}
	}

	private void addNewTab(Tool t)
	{
		CustomTab tab = new CustomTab(t);

		ContextMenu ctxMenu = new ContextMenu();
		MenuItem renameTab = new MenuItem(" Rename\t\t");
		MenuItem closeTab = new MenuItem(" Close\t\t");
		SeparatorMenuItem sep = new SeparatorMenuItem();

		closeTab.setOnAction(actionEvent -> {
			tabPane.getTabs().remove(tab);
			Event.fireEvent(tab, new Event(tab, tab, Tab.CLOSED_EVENT));
		});

		ctxMenu.getItems().add(renameTab);
		ctxMenu.getItems().add(sep);
		ctxMenu.getItems().add(closeTab);

		tab.setContextMenu(ctxMenu);

		tabPane.getTabs().add(tab);
		tabPane.getSelectionModel().select(tabPane.getTabs().size() - 1);
	}

	public void setStage(Stage stage)
	{
		myStage = stage;
	}

	public void refreshToolBox_OnClick()
	{
		populateList();
	}

	public void preferencesItem_OnClick()
	{
		try
		{
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/PreferencesWindow.fxml"));
			DialogPane pane = loader.load();
			PreferencesWindowController controller = loader.getController();

			pane.getStylesheets().add(getClass().getResource("/css/application.css").toExternalForm());

			Dialog<ButtonType> dialog = new Dialog<>();
			dialog.initStyle(StageStyle.UNDECORATED);
			dialog.setDialogPane(pane);
			dialog.show();
		}catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public void exitButton_OnClick()
	{
		myStage.close();
	}

	public void maximizeButton_OnClick()
	{
		myStage.setMaximized(!myStage.isMaximized());
	}

	public void minimizeButton_OnClick()
	{
		myStage.setIconified(true);
	}

	public void menubar_OnClick(MouseEvent event)
	{
		if(event.getClickCount() == 2)
		{
			myStage.setMaximized(!myStage.isMaximized());
		}
	}

	public void onMenuBarPressed(MouseEvent event)
	{
		X = event.getSceneX();
		Y = event.getSceneY();
	}

	public void onMenuBarDragged(MouseEvent event)
	{
		myStage.setX(event.getScreenX() - X);
		myStage.setY(event.getScreenY() - Y);
	}
}
