package com.pentester;

import java.net.URL;
import java.util.*;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

public class MainWindowController implements Initializable
{
	@FXML
	public Accordion toolbox;
	@FXML
	public TextArea descriptionBox;
	@FXML
	public ListView optionsListView;
	@FXML
	public TabPane tabPane;

	@Override
	public void initialize(URL arg0, ResourceBundle arg1)
	{
		populateList();
	}
	
	public void selectItem() 
	{
		System.out.println(true);
	}
	
	@SuppressWarnings("unchecked")
	private void populateList()
	{
		try
		{
			// clear toolbox first
			toolbox.getPanes().clear();

			// Load all tools from the specified path
			ToolEngine te = new ToolEngine();
			ObservableList<Tool> tools = te.loadTools("C:\\Users\\Hazem\\Documents\\IntelliJ Projects\\PenTester\\src\\Tools");

			Comparator<Tool> comparator = Comparator.comparing(Tool::getCategory);
			FXCollections.sort(tools, comparator);

			int paneIndex = 0;
			String currCategory = tools.get(0).getCategory();

			TitledPane tp = new TitledPane(currCategory, new VBox());
			tp.setAnimated(false);

			toolbox.getPanes().add(tp);

			for(int i = 0; i < tools.size(); i++)
			{
				Tool t = tools.get(i);

				if(!t.getCategory().equals(currCategory))
				{
					paneIndex++;
					currCategory = t.getCategory();

					tp = new TitledPane(currCategory, new VBox());
					tp.setAnimated(false);

					toolbox.getPanes().add(tp);
				}

				VBox child = (VBox) toolbox.getPanes().get(paneIndex).getContent();
				Button btn = new Button(t.getToolName());
				btn.setMaxWidth(Double.MAX_VALUE);
				btn.setUserData(t);
				btn.setMinHeight(30);
				btn.setStyle("-fx-background-color: transparent");

				btn.setOnMouseClicked(event -> {
					if(event.getButton().equals(MouseButton.PRIMARY) && event.getClickCount() == 2)
					{
						System.out.println("Double Clicked");
						addNewTab(t.getToolName() + " - Terminal");
					}
					else if(event.getButton().equals(MouseButton.PRIMARY) && event.getClickCount() == 1)
					{
						Tool selectedTool = (Tool) btn.getUserData();
						descriptionBox.setText(selectedTool.getToolDescription());
						optionsListView.getItems().clear();
						optionsListView.getItems().addAll(selectedTool.getToolOptions());
					}
				});

				child.setPadding(new Insets(-1,-1,-1,-1));
				child.getChildren().add(btn);
			}
		}
		catch (Exception e)
		{
			System.out.println(e.getStackTrace());
		}
	}

	private void addNewTab(String title)
	{
		CustomTab tab = new CustomTab(title, true);

		ContextMenu ctxMenu = new ContextMenu();
		MenuItem renameTab = new MenuItem(" Rename\t\t");
		MenuItem closeTab = new MenuItem(" Close\t\t");
		SeparatorMenuItem sep = new SeparatorMenuItem();

		Image icon = new Image(getClass().getResourceAsStream("/css/icons/edit-solid.png"));
		renameTab.setGraphic(new ImageView(icon));

		ctxMenu.getItems().add(renameTab);
		ctxMenu.getItems().add(sep);
		ctxMenu.getItems().add(closeTab);

		tab.setContextMenu(ctxMenu);

		tabPane.getTabs().add(tab);
		tabPane.getSelectionModel().select(tabPane.getTabs().size() - 1);
	}

	public void refreshToolBox_OnClick()
	{
		populateList();
	}
}
