package com.pentester;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class ToolEngine {
	ArrayList<Tool> tools = new ArrayList<Tool>();
	Map<Integer, String> map = new HashMap<>();
	
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	DocumentBuilder db;
	
	public void addTool(String toolPath)
	{
	}
	
	public void loadTools(String directory)
	{
		File toolsFolder = new File(directory);
		File[] files = toolsFolder.listFiles((dir, name)-> name.toLowerCase().endsWith(".xml"));
		
		try
		{
			for(int x = 0; x < files.length; x++)
			{
				dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
				db = dbf.newDocumentBuilder();
				Document doc = db.parse(files[x].getAbsolutePath());
				doc.getDocumentElement().normalize();
				
				NodeList toolList = doc.getElementsByTagName("Tool");
				NodeList description = doc.getElementsByTagName("Description");
				
				Element descriptionElement = (Element) description.item(0);
				Element toolElement = (Element) toolList.item(0);
				
				String toolCategory = toolElement.getAttribute("category");
				String toolName = toolElement.getAttribute("name");
				String toolSrc = toolElement.getAttribute("src");
				String toolDesc = descriptionElement.getTextContent().trim();
				
				tools.add(new Tool(toolName, toolSrc, toolCategory, toolDesc));
				
				if(!map.containsValue(toolCategory))
					map.put(map.size() - 1, toolCategory);
				
				NodeList optionList = toolElement.getChildNodes();
				
				for(int i = 0; i < optionList.getLength(); i++)
				{
					Node optionNode = optionList.item(i);
					
					if(optionNode.getNodeType() == Node.ELEMENT_NODE)
					{
						Element optionElement = (Element) optionNode;
						
						String optionType = optionElement.getAttribute("OptionType");
						String optionName = optionElement.getAttribute("OptionName");
						String optionCommand = optionElement.getAttribute("OptionCommand");
						
						ToolOptions options = new ToolOptions(optionType, optionName, optionCommand);
						tools.get(tools.size() - 1).addOption(options);
					}
				}
			}
		}
		catch (ParserConfigurationException | SAXException | IOException e) 
		{
			e.printStackTrace();
		}
	}
	
	public Tool getTool(int index)
	{
		return tools.get(index);
	}
	
	public Map<Integer, String> getCategoryMap()
	{
		return map;
	}
	
	public ArrayList<Tool> getAllTools()
	{
		return tools;
	}
}
